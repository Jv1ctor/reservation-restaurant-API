// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurants {
  id              String      @id @default(uuid()) @db.VarChar
  name_restaurant String      @db.VarChar
  address         String      @db.VarChar
  tel             String      @db.VarChar
  description     String      @db.VarChar
  kitchen         String      @db.VarChar
  minimun_price   Decimal     @db.Money
  maximum_price   Decimal     @db.Money
  localization    String      @default("none") @db.VarChar
  created_at      DateTime    @default(now()) @db.Timestamp()
  updated_at      DateTime    @default(now()) @db.Timestamp()
  user_id         String      @unique @db.VarChar
  users           Users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  table           Tables[]
  timetable       Timetable[]

  @@map("restaurants")
}

model Timetable {
  id            String      @id @default(uuid()) @db.VarChar
  weekday       String      @db.VarChar
  opening_hours DateTime    @db.Time()
  closing_hours DateTime    @db.Time()
  restaurant_id String      @db.VarChar
  restaurants   Restaurants @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("timetable")
}

model Tables {
  id             String       @id @default(uuid()) @db.VarChar
  number_table   Int          @db.Integer
  capacity       Int          @db.Integer
  status         String       @default("ready") @db.VarChar
  description    String       @db.VarChar()
  restaurant_id  String       @db.VarChar
  reservation_id String       @unique @db.VarChar
  restaurants    Restaurants  @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reservations   Reservations @relation(fields: [reservation_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("tables")
}

model Users {
  id           String         @id @default(uuid()) @db.VarChar
  first_name   String         @db.VarChar
  last_name    String         @db.VarChar
  email        String         @unique @db.VarChar
  password     String         @db.VarChar
  role         String         @default("regular") @db.VarChar
  logged       Boolean        @default(false)
  reservations Reservations[]
  restaurants  Restaurants?

  @@map("users")
}

model Reservations {
  id               String   @id @default(uuid()) @db.VarChar
  number_people    Int      @db.Integer
  status           String   @default("pending") @db.VarChar
  date_reservation DateTime @db.Timestamp
  date_coming      String   @db.VarChar
  observation      String   @db.VarChar
  user_id          String   @db.VarChar
  tables           Tables?
  users            Users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("reservations")
}
